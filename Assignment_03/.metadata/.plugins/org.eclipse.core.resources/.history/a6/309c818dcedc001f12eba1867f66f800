import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.Scanner;

public class TumblrAPIClient {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Step 1: Get the blog name and post range from user input
        System.out.print("Enter the Tumblr blog name (e.g., 'good'): ");
        String blogName = scanner.nextLine();

        System.out.print("Enter the range (start-end) of posts (1-5): ");
        String range = scanner.nextLine();

        // Step 2: Construct the API URL for the blog, dynamically using the blogName
        String apiUrl = "https://good.tumblr.com/api/read/json?type=photo&num=50&start=0";

        // Call the method to fetch and process the API data
        fetchTumblrData(apiUrl, range);
    }

    private static void fetchTumblrData(String apiUrl, String range) {
        try {
            // Open a connection to the Tumblr API
            HttpURLConnection connection = (HttpURLConnection) new URL(apiUrl).openConnection();
            connection.setRequestMethod("GET");
            connection.setConnectTimeout(5000);
            connection.setReadTimeout(5000);

            // Read the response from the API
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuilder response = new StringBuilder();
            String inputLine;

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();
            	
            System.out.println(response.toString());
            // The response is wrapped in 'var tumblr_api_read = ...', so we need to remove 'var tumblr_api_read = '
            String jsonResponseStr = response.toString();
            if (jsonResponseStr.startsWith("var tumblr_api_read = ")) {
                jsonResponseStr = jsonResponseStr.substring("var tumblr_api_read = ".length());
            }

            // Parse the JSON response using Jackson
            ObjectMapper objectMapper = new ObjectMapper();
            JsonNode rootNode = objectMapper.readTree(jsonResponseStr);

            // Extract the posts node
            JsonNode postsNode = rootNode.path("posts");
            
            System.out.println("@@@@");
            System.out.println(postsNode.toString());

            // Check if posts are available
            if (postsNode.isArray() && postsNode.size() > 0) {
                // Step 3: Print blog details
                JsonNode blogData = rootNode.path("tumblelog");
                System.out.println("title: " + blogData.path("title").asText());
                System.out.println("name: " + blogData.path("name").asText());
                System.out.println("description: " + blogData.path("description").asText());
                System.out.println("no of posts: " + postsNode.size());

                // Step 4: Process the specified range
                String[] rangeParts = range.split("-");
                int start = Integer.parseInt(rangeParts[0]);
                int end = Integer.parseInt(rangeParts[1]);

                // Ensure we do not go beyond the available posts
                end = Math.min(end, postsNode.size());
                start = Math.max(start, 1);

                // Step 5: Iterate through the posts and print image URLs (up to the specified range)
                for (int i = start - 1; i < end; i++) {
                    JsonNode post = postsNode.get(i);

                    // Access the photos array inside the post
                    JsonNode photosNode = post.path("photos");

                    // Loop through each photo and extract the URLs
                    if (photosNode.isArray() && photosNode.size() > 0) {
                        System.out.println(i + 1 + ".");
                        for (JsonNode photo : photosNode) {
                            JsonNode originalSizeUrl = photo.path("original_size").path("url");
                            if (!originalSizeUrl.isMissingNode()) {
                                String photoUrl = originalSizeUrl.asText();
                                System.out.println(photoUrl);
                            }
                        }
                    }
                }
            } else {
                System.out.println("No posts found for this blog.");
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
