
import org.json.JSONArray;
import org.json.JSONObject;

import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

public class ImageFetcher {

    private static final String TUMBLR_API_URL = "https://bad.tumblr.com/api/read/json?type=photo&num=5&start=";
    private static final int CONNECT_TIMEOUT = 5000;
    private static final int READ_TIMEOUT = 5000;

    public BlogData fetchBlogData(int startPost) throws IOException {
        String apiUrl = TUMBLR_API_URL + startPost;
        String jsonResponse = fetchApiResponse(apiUrl);
        return parseBlogData(jsonResponse);
    }

    private String fetchApiResponse(String apiUrl) throws IOException {
        return ApiUtils.fetchApiResponse(apiUrl, CONNECT_TIMEOUT, READ_TIMEOUT); // Using a utility class
    }

    private BlogData parseBlogData(String jsonResponse) throws IOException {
        try {
            if (jsonResponse.startsWith("var tumblr_api_read = ")) {
                jsonResponse = jsonResponse.substring("var tumblr_api_read = ".length());
            } else {
                throw new IOException("Unexpected response format from Tumblr API.");
            }

            JSONObject jsonObject = new JSONObject(jsonResponse);
            return createTumblrBlogData(jsonObject); // Factory method to create the data object

        } catch (org.json.JSONException e) {
            throw new IOException("Invalid JSON response: " + e.getMessage());
        }
    }

    private BlogData createTumblrBlogData(JSONObject jsonObject) {
        JSONObject tumblelog = jsonObject.getJSONObject("tumblelog");
        String title = tumblelog.optString("title", "N/A");
        String name = tumblelog.optString("name", "N/A");
        String description = tumblelog.optString("description", "N/A");
        int totalPosts = jsonObject.optInt("posts-total", 0);

        BlogData blogData = new BlogData(title, name, description, totalPosts);
        JSONArray posts = jsonObject.getJSONArray("posts");

        for (int i = 0; i < posts.length(); i++) {
            JSONObject post = posts.getJSONObject(i);
            Set<String> imageUrls = extractImageUrls(post);
            blogData.addPostImageUrls(imageUrls); // Add image URLs to the blog data object
        }
        return blogData;
    }


    private Set<String> extractImageUrls(JSONObject post) {
        Set<String> imageUrls = new HashSet<>();

        for (String key : post.keySet()) {
            if (key.startsWith("photo-url-")) {
                imageUrls.add(post.getString(key));
            }
        }

        if (post.has("photos")) {
            JSONArray photosArray = post.getJSONArray("photos");
            for (int j = 0; j < photosArray.length(); j++) {
                JSONObject photo = photosArray.getJSONObject(j);
                for (String key : photo.keySet()) {
                    if (key.startsWith("photo-url-")) {
                        imageUrls.add(photo.getString(key));
                    }
                }
            }
        }

        return imageUrls;
    }
}