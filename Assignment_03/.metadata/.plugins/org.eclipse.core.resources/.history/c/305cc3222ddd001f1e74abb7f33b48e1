import org.json.JSONArray;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashSet;
import java.util.Scanner;
import java.util.Set;

public class TumblrAPIClient {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Step 1: Get the blog name and post range from user input
        System.out.print("Enter the Tumblr blog name (e.g., 'good'): ");
        String blogName = scanner.nextLine();

        System.out.print("Enter the range (start-end) of posts: ");
        String range = scanner.nextLine();

        // Step 2: Construct the API URL for the blog
        String apiUrl = "https://bad.tumblr.com/api/read/json?type=photo&num=50&start=0";

        // Call the method to fetch and process the API data
        fetchTumblrData(apiUrl, range);
    }

    private static void fetchTumblrData(String apiUrl, String range) {
        try {
            // Open a connection to the Tumblr API
        	System.out.println("Starting in function : ");
            HttpURLConnection connection = (HttpURLConnection) new URL(apiUrl).openConnection();
            connection.setRequestMethod("GET");
            connection.setConnectTimeout(5000);
            connection.setReadTimeout(5000);
            System.out.println("In between method : ");
            // Read the response from the API
            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
            StringBuilder response = new StringBuilder();
            String inputLine;

            while ((inputLine = in.readLine()) != null) {
                response.append(inputLine);
            }
            in.close();
            String jsonResponseStr = response.toString();
            if (jsonResponseStr.startsWith("var tumblr_api_read = ")) {
                jsonResponseStr = jsonResponseStr.substring("var tumblr_api_read = ".length());
            }
            JSONObject jsonObject = new JSONObject(jsonResponseStr);

            System.out.println(jsonObject.optStringh('title'));
            
            JSONArray posts = jsonObject.getJSONArray("posts");

            for (int i = 0; i < posts.length(); i++) {
                JSONObject post = posts.getJSONObject(i);
                String postId = post.getString("id");

                // Use a Set to store unique image URLs
                Set<String> imageUrls = new HashSet<>();

                String highestQualityTopLevelUrl = null;
                int maxResolutionTopLevel = 0;
                for (String key : post.keySet()) {
                    if (key.startsWith("photo-url-")) {
                        String url = post.getString(key);
                        int resolution = Integer.parseInt(key.replace("photo-url-", ""));
                        if (resolution > maxResolutionTopLevel) {
                            maxResolutionTopLevel = resolution;
                            highestQualityTopLevelUrl = url;
                        }
                    }
                }
                if (highestQualityTopLevelUrl != null) {
                    imageUrls.add(highestQualityTopLevelUrl);
                }
                
                if (post.has("photos")) {
                    JSONArray photosArray = post.getJSONArray("photos");
                    for (int j = 0; j < photosArray.length(); j++) {
                        JSONObject photo = photosArray.getJSONObject(j);

                        // Find the highest quality image in each photo object
                        String highestQualityUrl = null;
                        int maxResolution = 0;

                        for (String key : photo.keySet()) {
                            if (key.startsWith("photo-url-")) {
                                String url = photo.getString(key);
                                int resolution = Integer.parseInt(key.replace("photo-url-", ""));
                                if (resolution > maxResolution) {
                                    maxResolution = resolution;
                                    highestQualityUrl = url;
                                }
                            }
                        }

                        if (highestQualityUrl != null) {
                            imageUrls.add(highestQualityUrl);
                        }
                    }
                }

                // Print results for the current post
                System.out.println("Post ID: " + postId);
                System.out.println("Image URLs:");
                for (String url : imageUrls) {
                    System.out.println(url);
                }
                System.out.println();
            }
/*            JSONObject jsonObject = new JSONObject(jsonResponseStr);

            // 1. Extract basic blog information
            JSONObject tumblelog = jsonObject.getJSONObject("tumblelog");
            String title = tumblelog.optString("title", "N/A");
            String description = tumblelog.optString("description", "N/A");
            String name = tumblelog.optString("name", "N/A");
            int totalPosts = jsonObject.optInt("posts-total", 0);

            System.out.println("Blog Information:");
            System.out.println("Title: " + title);
            System.out.println("Description: " + description);
            System.out.println("Name: " + name);
            System.out.println("Total Posts: " + totalPosts);
            System.out.println();

            // 2. Extract highest quality images for each post
            JSONArray posts = jsonObject.getJSONArray("posts");
            System.out.println("Image URLs for each post:");

            for (int i = 0; i < posts.length(); i++) {
                JSONObject post = posts.getJSONObject(i);
                String postId = post.optString("id", "Unknown");
                System.out.println("Post ID: " + postId);

                // Extract all images for the post
                JSONArray photos = post.optJSONArray("photos");
                if (photos != null) {
                    for (int j = 0; j < photos.length(); j++) {
                        JSONObject photo = photos.getJSONObject(j);

                        // Find the highest quality image dynamically
                        String highestQualityUrl = null;
                        int maxResolution = 0;

                        for (String key : photo.keySet()) {
                            if (key.startsWith("photo-url-")) {
                                String url = photo.getString(key);
                                int resolution = Integer.parseInt(key.replace("photo-url-", ""));
                                if (resolution > maxResolution) {
                                    maxResolution = resolution;
                                    highestQualityUrl = url;
                                }
                            }
                        }

                        if (highestQualityUrl != null) {
                            System.out.println("  Image " + (j + 1) + ": " + highestQualityUrl + " (Resolution: " + maxResolution + ")");
                        }
                    }
                } else {
                    System.out.println("  No images available for this post.");
                }
            }
            /*
            JSONObject jsonObject = new JSONObject(jsonResponseStr);

            // 1. Extract basic blog information
            JSONObject tumblelog = jsonObject.getJSONObject("tumblelog");
            String title = tumblelog.optString("title", "N/A");
            String description = tumblelog.optString("description", "N/A");
            String name = tumblelog.optString("name", "N/A");
            int totalPosts = jsonObject.optInt("posts-total", 0);

            System.out.println("Blog Information:");
            System.out.println("Title: " + title);
            System.out.println("Description: " + description);
            System.out.println("Name: " + name);
            System.out.println("Total Posts: " + totalPosts);
            System.out.println();

            // 2. Extract the highest quality image URLs for the given post range
            JSONArray posts = jsonObject.getJSONArray("posts");
            System.out.println("Image URLs for each post:");

            for (int i = 0; i < posts.length(); i++) {
                JSONObject post = posts.getJSONObject(i);
                String postId = post.optString("id", "Unknown");
                System.out.println("Post ID: " + postId);

                // Extract all images for the post
                JSONArray photos = post.optJSONArray("photos");
                if (photos != null) {
                    for (int j = 0; j < photos.length(); j++) {
                        JSONObject photo = photos.getJSONObject(j);

                        // Check for the highest quality image (1280 format)
                        String highestQualityUrl = photo.optString("photo-url-1280", null);
                        if (highestQualityUrl != null) {
                            System.out.println("  Image " + (j + 1) + ": " + highestQualityUrl);
                        }
                    }
                } else {
                    // Handle posts with no photos
                    System.out.println("  No images available for this post.");
                }
            }
            
            /*
            JSONObject jsonObject = new JSONObject(jsonResponseStr);

            // Extract the posts array
            JSONArray posts = jsonObject.getJSONArray("posts");

            // Loop through the posts and extract the high-quality image URLs
            for (int i = 0; i < posts.length(); i++) {
                JSONObject post = posts.getJSONObject(i);
                
                if (post.has("photo-url-1280")) {
                    String imageUrl = post.getString("photo-url-1280");
                    System.out.println("High-Quality Image URL: " + imageUrl);
                }
            }
            /*
//            System.out.println("response  : ");
//            System.out.println(response.toString());
            // The response is wrapped in 'var tumblr_api_read = ...', so we need to remove 'var tumblr_api_read = '
            String jsonResponseStr = response.toString();
            if (jsonResponseStr.startsWith("var tumblr_api_read = ")) {
                jsonResponseStr = jsonResponseStr.substring("var tumblr_api_read = ".length());
            }
            System.out.println(response.toString());
           // System.out.println(jsonResponseStr);
            // Parse the JSON response
            JSONObject jsonResponse = new JSONObject(jsonResponseStr);
            JSONObject blogData = jsonResponse.getJSONObject("tumblelog");
            
           // System.out.println(blogData);
            // Step 3: Extract basic blog info
            //String title = blogData.getString("title");
            //String description = blogData.getString("description");
            //int numPosts = blogData.getInt("posts");

//            System.out.println("title: " + title);
//            System.out.println("name: " + blogData.getString("name"));
//            System.out.println("description: " + description);
//            System.out.println("no of posts: " + numPosts);

            // Step 4: Process the specified range
//            String[] rangeParts = range.split("-");
//            int start = Integer.parseInt(rangeParts[0]);
//            int end = Integer.parseInt(rangeParts[1]);

            // Get the posts array
            JSONArray posts = jsonResponse.getJSONArray("posts");
            
            //System.out.println(posts.toString());
            	
            JSONObject post = posts.getJSONObject(0);
            JSONArray photos = post.getJSONArray("photos");
            JSONObject photo = photos.getJSONObject(0);
            String urlValue = photo.optString("photo-url-100");
            System.out.println(urlValue);
            */

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
